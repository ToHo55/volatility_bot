# rsi_strategy_automation.py

import os
import logging
from datetime import datetime
from typing import Dict, Tuple
from rsi_strategy import RSIReversalStrategy  # 사용자가 만든 전략 클래스 import
from backtest import run_backtest  # 기존 run_backtest 함수 import

# 로그 설정
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/rsi_automation.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# 1. 시장국면별 구간
MARKET_PHASES: Dict[str, Tuple[str, str]] = {
    "bull_2023_q1": ("2023-01-01", "2023-04-01"),
    "crash_2022_luna": ("2022-06-01", "2022-07-01"),
    "sideways_2023_aug": ("2023-08-01", "2023-08-31"),
    "recent_2025": ("2025-01-01", "2025-04-22")
}

# 2. 코인 그룹
ALTCOINS: Dict[str, list[str]] = {
    "major": ["KRW-ETH", "KRW-XRP"],
    "oversold": ["KRW-SAND", "KRW-ARDR"],
    "low_liquidity": ["KRW-CRE", "KRW-LOOM"]
}

# 3. 수수료 및 슬리피지 조합
SLIPPAGE_TEST = [0.001, 0.002, 0.003]
FEE_TEST = [0.0005, 0.0010, 0.0020]

# 4. 백테스트 반복 실행
def automated_rsi_experiment():
    for phase_name, (start, end) in MARKET_PHASES.items():
        for group_name, coins in ALTCOINS.items():
            for ticker in coins:
                for slippage in SLIPPAGE_TEST:
                    for fee in FEE_TEST:
                        logging.info(f"[START] {phase_name} | {group_name} | {ticker} | 슬리피지: {slippage} | 수수료: {fee}")

                        # 전략 설정
                        strategy = RSIReversalStrategy()
                        strategy.fees['slippage'] = slippage
                        strategy.fees['buy_fee'] = fee
                        strategy.fees['sell_fee'] = fee

                        # 실행
                        try:
                            run_backtest(strategy, ticker, start, end)
                        except Exception as e:
                            logging.warning(f"실패: {ticker} | 오류: {str(e)}")

if __name__ == '__main__':
    logging.info("[시작] RSI 전략 자동화 실험")
    automated_rsi_experiment()
    logging.info("[완료] 전체 실험 종료")
