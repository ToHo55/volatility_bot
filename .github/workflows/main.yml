name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Build TA-Lib C library
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y build-essential wget libtool autoconf automake

          wget -q http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib

          ./configure --prefix=/usr \
              --disable-tools --disable-examples --disable-samples

          make -C src -j1 libta_lib.la
          sudo make -C src install
          
          # Set environment variables for Python binding
          export TA_INCLUDE_PATH=/usr/include
          export TA_LIBRARY_PATH=/usr/lib
          sudo ldconfig
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          # ① 먼저 전체 프로젝트에서 쓸 Numpy 1.24 고정
          pip install "numpy>=1.23,<1.26" pandas==1.5.3

          # ② TA-Lib 래퍼는 Build-Isolation 끈 채로 설치
          pip install --no-build-isolation ta-lib==0.4.28

          # ③ 나머지 패키지(의존성 중복 방지 위해 --no-deps)
          pip install --no-deps -r requirements.txt
      
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/ --cov=src/ --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/volatility-bot:latest
            ${{ secrets.DOCKER_USERNAME }}/volatility-bot:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/volatility-bot:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/volatility-bot:buildcache,mode=max
